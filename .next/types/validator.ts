// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/bookmarks/page.tsx
{
  const handler = {} as typeof import("../../src/app/bookmarks/page.js")
  handler satisfies AppPageConfig<"/bookmarks">
}

// Validate ../../src/app/cast/[name]/page.tsx
{
  const handler = {} as typeof import("../../src/app/cast/[name]/page.js")
  handler satisfies AppPageConfig<"/cast/[name]">
}

// Validate ../../src/app/coming-soon/page.tsx
{
  const handler = {} as typeof import("../../src/app/coming-soon/page.js")
  handler satisfies AppPageConfig<"/coming-soon">
}

// Validate ../../src/app/jobs/page.tsx
{
  const handler = {} as typeof import("../../src/app/jobs/page.js")
  handler satisfies AppPageConfig<"/jobs">
}

// Validate ../../src/app/login/page.tsx
{
  const handler = {} as typeof import("../../src/app/login/page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ../../src/app/messages/page.tsx
{
  const handler = {} as typeof import("../../src/app/messages/page.js")
  handler satisfies AppPageConfig<"/messages">
}

// Validate ../../src/app/my-stories/page.tsx
{
  const handler = {} as typeof import("../../src/app/my-stories/page.js")
  handler satisfies AppPageConfig<"/my-stories">
}

// Validate ../../src/app/notifications/page.tsx
{
  const handler = {} as typeof import("../../src/app/notifications/page.js")
  handler satisfies AppPageConfig<"/notifications">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/post-opportunity/page.tsx
{
  const handler = {} as typeof import("../../src/app/post-opportunity/page.js")
  handler satisfies AppPageConfig<"/post-opportunity">
}

// Validate ../../src/app/profile/page.tsx
{
  const handler = {} as typeof import("../../src/app/profile/page.js")
  handler satisfies AppPageConfig<"/profile">
}

// Validate ../../src/app/reviews/page.tsx
{
  const handler = {} as typeof import("../../src/app/reviews/page.js")
  handler satisfies AppPageConfig<"/reviews">
}

// Validate ../../src/app/search/[query]/page.tsx
{
  const handler = {} as typeof import("../../src/app/search/[query]/page.js")
  handler satisfies AppPageConfig<"/search/[query]">
}

// Validate ../../src/app/search/page.tsx
{
  const handler = {} as typeof import("../../src/app/search/page.js")
  handler satisfies AppPageConfig<"/search">
}

// Validate ../../src/app/settings/account/page.tsx
{
  const handler = {} as typeof import("../../src/app/settings/account/page.js")
  handler satisfies AppPageConfig<"/settings/account">
}

// Validate ../../src/app/settings/display/page.tsx
{
  const handler = {} as typeof import("../../src/app/settings/display/page.js")
  handler satisfies AppPageConfig<"/settings/display">
}

// Validate ../../src/app/settings/help/page.tsx
{
  const handler = {} as typeof import("../../src/app/settings/help/page.js")
  handler satisfies AppPageConfig<"/settings/help">
}

// Validate ../../src/app/settings/notifications/page.tsx
{
  const handler = {} as typeof import("../../src/app/settings/notifications/page.js")
  handler satisfies AppPageConfig<"/settings/notifications">
}

// Validate ../../src/app/settings/page.tsx
{
  const handler = {} as typeof import("../../src/app/settings/page.js")
  handler satisfies AppPageConfig<"/settings">
}

// Validate ../../src/app/settings/privacy/page.tsx
{
  const handler = {} as typeof import("../../src/app/settings/privacy/page.js")
  handler satisfies AppPageConfig<"/settings/privacy">
}

// Validate ../../src/app/settings/security/page.tsx
{
  const handler = {} as typeof import("../../src/app/settings/security/page.js")
  handler satisfies AppPageConfig<"/settings/security">
}

// Validate ../../src/app/signup/page.tsx
{
  const handler = {} as typeof import("../../src/app/signup/page.js")
  handler satisfies AppPageConfig<"/signup">
}

// Validate ../../src/app/spaces/[id]/page.tsx
{
  const handler = {} as typeof import("../../src/app/spaces/[id]/page.js")
  handler satisfies AppPageConfig<"/spaces/[id]">
}

// Validate ../../src/app/spaces/page.tsx
{
  const handler = {} as typeof import("../../src/app/spaces/page.js")
  handler satisfies AppPageConfig<"/spaces">
}

// Validate ../../src/app/submit/[id]/page.tsx
{
  const handler = {} as typeof import("../../src/app/submit/[id]/page.js")
  handler satisfies AppPageConfig<"/submit/[id]">
}

// Validate ../../src/app/tickets/page.tsx
{
  const handler = {} as typeof import("../../src/app/tickets/page.js")
  handler satisfies AppPageConfig<"/tickets">
}

// Validate ../../src/app/api/coming-soon/route.ts
{
  const handler = {} as typeof import("../../src/app/api/coming-soon/route.js")
  handler satisfies RouteHandlerConfig<"/api/coming-soon">
}

// Validate ../../src/app/api/search/route.ts
{
  const handler = {} as typeof import("../../src/app/api/search/route.js")
  handler satisfies RouteHandlerConfig<"/api/search">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ../../src/app/settings/layout.tsx
{
  const handler = {} as typeof import("../../src/app/settings/layout.js")
  handler satisfies LayoutConfig<"/settings">
}
